---
- name: Configure Homelab DNS.
  hosts: homelab_dns

  pre_tasks:
    - name: Load configuration.
      ansible.builtin.include_vars: config.yml

    - name: Update apt cache.
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      become: true

  tasks:
    - name: Install Docker if not available
      ansible.builtin.import_tasks: tasks/docker-setup.yml

    - name: Install htpasswd utility
      ansible.builtin.apt:
        name: apache2-utils
        state: present
      become: true
      when: activate_webinterfaces and (traefik_user|default('')|length > 0) and (traefik_password|default('')|length > 0)

    - name: generate traefik Basic Auth string
      ansible.builtin.shell:
        cmd: |
          echo $(htpasswd -nbB {{ traefik_user }} {{ traefik_password }}) | sed -e s/\\$/\\$\\$/g
        executable: /bin/bash
      when: activate_webinterfaces and (traefik_user|default('')|length > 0) and (traefik_password|default('')|length > 0)
      changed_when: false
      register: traefik_basic_auth

    - name: Create config directories if they do not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ config_dir }}"
        - "{{ config_dir }}/pihole"
        - "{{ config_dir }}/pihole/etc"
        - "{{ config_dir }}/pihole/dnsmasq"
        - "{{ config_dir }}/dnscrypt-proxy"
        - "{{ config_dir }}/record-service"
        - "{{ config_dir }}/record-service/www"
        - "{{ config_dir }}/record-service/config"

    - name: Copy templated config files into place
      ansible.builtin.template:
        src: templates/{{ item.src }}
        dest: "{{ config_dir }}/{{ item.dest }}"
      loop:
        - src: docker-compose.yml.j2
          dest: docker-compose.yml
        - src: dnscrypt-proxy/dnscrypt-proxy.toml.j2
          dest: dnscrypt-proxy/dnscrypt-proxy.toml
        - src: record-service/www/index.html.j2
          dest: record-service/www/index.html
        - src: record-service/www/api.json.j2
          dest: record-service/www/api.json
        - src: record-service/www/api.yaml.j2
          dest: record-service/www/api.yaml
        - src: record-service/config/yaml-mime-type.conf.j2
          dest: record-service/config/yaml-mime-type.conf

    - name: Ensure homelab-dns configuration is running
      ansible.builtin.shell:
        cmd: |
          {% if activate_webinterfaces and activate_pihole_webgui %}
          set +o history # temporarily turn off history
          export PI_HOLE_PW={{ pihole_webgui_password|default('') }}
          set -o history # turn it back on
          {% endif %}
          docker compose up --detach
        executable: /bin/bash
        chdir: "{{ config_dir }}"
      register: docker_compose

    - name: docker compose output
      ansible.builtin.debug:
        msg: "{{ docker_compose['stderr_lines'] }}"

    - name: Block forwarding of requests in the private zone to public servers
      ansible.builtin.command:
        cmd: "docker exec pihole pihole --wild {{ dns_zone }}"
      when: block_private_requests_to_public_servers
      register: block_private_requests_to_public
      changed_when: "'Adding' in block_private_requests_to_public.stdout"
