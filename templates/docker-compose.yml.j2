# {{ ansible_managed }}
---
version: "3"

networks:
  resolver-internal:
    driver: bridge
    ipam:
      config:
        - subnet: "192.168.48.0/29" # static network configuration needed since bind9 upstream can't be a hostname
          gateway: "192.168.48.1"
{% if activate_webinterfaces %}
  resolver-external:
    driver: bridge
{% endif %}

services:
  bind9:
    container_name: bind9
    image: cytopia/bind:stable
    pull_policy: always
    environment:
      - DNS_FORWARDER=1.1.1.1 # temporary cloudflare upstream
{% set a_records = ['ns.' ~ dns_zone ~ '=' ~ ansible_facts['default_ipv4']['address']] %}
{% if activate_webinterfaces %}
{% if activate_traefik_dashboard %}
{% set null = a_records.append('traefik.ns.' ~ dns_zone ~ '=' ~ ansible_facts['default_ipv4']['address']) %}
{% endif %}
{% endif %}
{% for host in hosts %}
{% set null = a_records.append(host['name'] ~ '.' ~ dns_zone ~ '=' ~ host['addr']) %}
{% endfor %}
{% for record in additional_a_records|default([]) %}
{% set null = a_records.append(record) %}
{% endfor %}
      - DNS_A={{ a_records|join(', ') }}
{% set ptr_records = [ansible_facts['default_ipv4']['address'] ~ '=' ~ 'ns.' ~ dns_zone] %}
{% for host in hosts %}
{% if '*' not in host['name'] %}
{% set null = ptr_records.append(host['addr'] ~ '=' ~ host['name'] ~ '.' ~ dns_zone) %}
{% endif %}
{% endfor %}
      - DNS_PTR={{ ptr_records|join(', ') }}
{% if cname_records|default([])|length > 0 %}
      - DNS_CNAME={{ cname_records|join(', ') }}
{% endif %}
      - ALLOW_QUERY={{ allowed_clients }}
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    networks:
      resolver-internal:
        ipv4_address: "192.168.48.2"
    restart: unless-stopped
{% if activate_webinterfaces %}
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
{% if activate_traefik_dashboard %}
      - "--api.dashboard=true"
      # ToDo: implement auth
{% endif %}
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resolver-external"
      - "--entrypoints.web.address=:80"
      # ToDo: implement optional HTTPS
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`traefik.ns.{{ dns_zone }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
{% if activate_traefik_dashboard %}
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.ns.{{ dns_zone }}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=web"
{% endif %}
    ports:
      - "80:80"
    networks:
      resolver-external:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
{% if activate_record_list_service %}
  record-service:
    image: nginx:1.24.0
    container_name: record-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.record-service.rule=Host(`ns.{{ dns_zone }}`)"
      - "traefik.http.routers.record-service.entrypoints=web"
    networks:
      resolver-external:
    volumes:
      - ./record-service:/usr/share/nginx/html
{% endif %}
{% endif %}
